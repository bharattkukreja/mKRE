/*
Copyright 2021 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/google/knative-gcp/pkg/apis/intevents/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BrokerCellLister helps list BrokerCells.
// All objects returned here must be treated as read-only.
type BrokerCellLister interface {
	// List lists all BrokerCells in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BrokerCell, err error)
	// BrokerCells returns an object that can list and get BrokerCells.
	BrokerCells(namespace string) BrokerCellNamespaceLister
	BrokerCellListerExpansion
}

// brokerCellLister implements the BrokerCellLister interface.
type brokerCellLister struct {
	indexer cache.Indexer
}

// NewBrokerCellLister returns a new BrokerCellLister.
func NewBrokerCellLister(indexer cache.Indexer) BrokerCellLister {
	return &brokerCellLister{indexer: indexer}
}

// List lists all BrokerCells in the indexer.
func (s *brokerCellLister) List(selector labels.Selector) (ret []*v1alpha1.BrokerCell, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BrokerCell))
	})
	return ret, err
}

// BrokerCells returns an object that can list and get BrokerCells.
func (s *brokerCellLister) BrokerCells(namespace string) BrokerCellNamespaceLister {
	return brokerCellNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BrokerCellNamespaceLister helps list and get BrokerCells.
// All objects returned here must be treated as read-only.
type BrokerCellNamespaceLister interface {
	// List lists all BrokerCells in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BrokerCell, err error)
	// Get retrieves the BrokerCell from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BrokerCell, error)
	BrokerCellNamespaceListerExpansion
}

// brokerCellNamespaceLister implements the BrokerCellNamespaceLister
// interface.
type brokerCellNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BrokerCells in the indexer for a given namespace.
func (s brokerCellNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BrokerCell, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BrokerCell))
	})
	return ret, err
}

// Get retrieves the BrokerCell from the indexer for a given namespace and name.
func (s brokerCellNamespaceLister) Get(name string) (*v1alpha1.BrokerCell, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("brokercell"), name)
	}
	return obj.(*v1alpha1.BrokerCell), nil
}
