/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
package config;
option go_package="github.com/google/knative-gcp/pkg/broker/config";

// The state of the object.
// We may add additional intermediate states if needed.
enum State {
  UNKNOWN = 0;
  READY = 1;
}

// CellTenantType is the type of the Cell Tenant.
enum CellTenantType {
  UNKNOWN_CELL_TENANT_TYPE = 0;
  BROKER = 1;
  CHANNEL = 2;
}

// A pubsub "queue".
message Queue {
  string topic = 1;
  string subscription = 2;
  State state = 3;
}

// Represents a tenant of the Cell. E.g. Broker, Channel, etc.
message CellTenant {
  // The type of this CellTenant (e.g. Broker, Channel, etc.).
  CellTenantType type = 8;

  // The id of the object. E.g. UID of the resource.
  string id = 1;

  // The name of the object.
  string name = 2;

  // The namespace of the object.
  string namespace = 3;

  // The object's subscriber's address.
  // Will we have more than one address?
  string address = 4;

  // The decouple queue for the cell tenant.
  Queue decouple_queue = 5;

  // All targets of the cell tenant. Key is defined by the CellTenant's type:
  // - Broker: Key is the name of the Trigger.
  map<string, Target> targets = 6;

  // The CellTenant's state.
  State state = 7;
}

// Target defines the config schema for a CellTenant's subscription's target.
message Target {
  // The id of the object. E.g. UID of the resource.
  string id = 1;

  // The name of the object.
  string name = 2;

  // The namespace of the object.
  string namespace = 3;

  // The name of the CellTenant that this Target is associated with.
  string cell_tenant_name = 4;

  // The type of the CellTenant that this Target is associated with.
  CellTenantType cell_tenant_type = 9;

  // The resolved subscriber URI of the target.
  string address = 5;

  // Optional filters from the trigger.
  map<string, string> filter_attributes = 6;

  // The retry queue for the target.
  Queue retry_queue = 7;

  // The target state.
  State state = 8;

  // The resolved URI that replies are sent to.
  string reply_address = 10;
}

// TargetsConfig is the collection of all Targets.
message TargetsConfig {
  // Keyed by the CellTenant's PersistenceString().
  // Broker: "<ns>/<brokerName>"
  // Channel: "channel/<ns>/<channelName>"
  map<string, CellTenant> cell_tenants = 1;
}
